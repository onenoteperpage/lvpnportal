@page "/instance-configuration"
@inject IVultrApiService VultrApiService
@inject ILunaApiService LunaApiService

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Create VPN Server</h1>
    </div>

    @if (string.IsNullOrEmpty(errorMessage))
    {
        @if (lunaCIPs == null || lunaCIPRegions?.Count == 0)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-dark">Regional Select</h6>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-12">
                            <p class="lead">
                                Welcome to LunaVPN's Region Selection Page! To provide you with a tailored VPN experience, 
                                please choose your desired region, country, and city for VPN deployment. Start by selecting 
                                your region from the dropdown menu, followed by the corresponding country, and finally, the 
                                city of your choice. This flexibility allows you to relocate your VPN service at any time 
                                during the license period or set up multiple VPNs concurrently. If you have any questions 
                                or need assistance, feel free to reach out. Let's customize your LunaVPN experience for 
                                optimal online security and privacy!
                            </p>
                        </div>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label" for="regionDropdown">Region:</label>
                            <select class="form-select" id="regionDropdown" @onchange="OnRegionChanged">
                                <option value="">Select region...</option>
                                @foreach (var region in lunaCIPRegions!)
                                {
                                    <option value="@region">@region</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label" for="countryDropdown">
                                @if (!string.IsNullOrEmpty(selectedCountry))
                                {
                                    flagUrl = lunaCIPs.First(r => r.Country == selectedCountry).FlagCode;
                                    <img src="@flagUrl" alt="Flag" style="width: 20px; height: 20px; margin-right: 5px;" />
                                }
                                Country:
                            </label>
                            <select class="form-select" id="countryDropdown" @onchange="OnCountryChanged" value="@selectedCountry">
                                <option value="">Select country...</option>
                                @foreach (var country in lunaCIPs!.Where(r => r.Region == selectedRegion).Select(r => r.Country).Distinct())
                                {
                                    flagUrl = lunaCIPs.First(r => r.Country == country).FlagCode;
                                    <option value="@country" class="custom-option" data-flag-url="@flagUrl">@country</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label" for="cityDropdown">City:</label>
                            <select class="form-select" id="cityDropdown" @onchange="OnCityChanged" value="@selectedCity">
                                <option value="">Select country...</option>
                                @foreach (var country in lunaCIPs!.Where(r => r.Country == selectedCountry).Select(r => r.City).Distinct())
                                {
                                    <option value="@country">@country</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row g-3">
                        <button class="btn btn-primary" disabled="@isButtonDisabled" @onclick="() => OnButtonClick()">Enable and Call Function</button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <h2>@errorMessage</h2>
    }
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string email = string.Empty;
    private string usrId = string.Empty;
    private string errorMessage = string.Empty;

    private bool isButtonDisabled = true;

    private List<LunaCIP> lunaCIPs = new();
    private List<string> lunaCIPRegions = new();
    //private string selectedApp = string.Empty;
    //private string selectedProvider = string.Empty;
    private string selectedRegion = string.Empty;
    private string selectedCountry = string.Empty;
    private string selectedCity = string.Empty;
    private string flagUrl = string.Empty;

    private string selectedPayload = string.Empty;

    //private void OnAppChanged(ChangeEventArgs e)
    //{
    //    selectedApp = e?.Value?.ToString()!;
    //    InvokeAsync(StateHasChanged);
    //}

    private void OnRegionChanged(ChangeEventArgs e)
    {
        selectedRegion = e?.Value?.ToString()!;
        selectedCountry = string.Empty;
        selectedCity = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private void OnCountryChanged(ChangeEventArgs e)
    {
        selectedCountry = e?.Value?.ToString()!;
        selectedCity = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private void OnCityChanged(ChangeEventArgs e)
    {
        selectedCity = e?.Value?.ToString()!;
        isButtonDisabled = false;
        InvokeAsync(StateHasChanged);
    }

    private void OnButtonClick()
    {
        // Your logic for the button click
        // This function will be called when the button is clicked
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            email = state?.User?.Identity?.Name ?? "UNKNOWN USER";
            usrId = EncryptionHelper.GenerateToken(email);
            var result = await UsrService.CreateUserAccount(encryptedUserId: usrId);
            if (result == 1)
                errorMessage = "Contact support";
        }

        await LunaApiService.GetRegions();
        lunaCIPs = LunaApiService.LunaCIPs;
        var uniqueRegions = lunaCIPs.Select(r => r.Region).Distinct().ToList();
        lunaCIPRegions.AddRange(uniqueRegions);
        StateHasChanged(); // Ensure UI updates after the data is loaded

        await base.OnInitializedAsync();
    }
}