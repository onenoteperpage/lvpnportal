@page "/create-instance"
@inject IVultrApiService VultrApiService
@inject ILunaApiService LunaApiService

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Create VPN Server</h1>
    </div>

    @if (lunaCIPs == null || lunaCIPRegions?.Count == 0)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-dark">Regional Select</h6>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label" for="regionDropdown">Region:</label>
                        <select class="form-select" id="regionDropdown" @onchange="OnRegionChanged">
                            <option value="">Select region...</option>
                            @foreach (var region in lunaCIPRegions!)
                            {
                                <option value="@region">@region</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label" for="countryDropdown">
                            @if (!string.IsNullOrEmpty(selectedCountry))
                            {
                                flagUrl = lunaCIPs.First(r => r.Country == selectedCountry).FlagCode;
                                <img src="@flagUrl" alt="Flag" style="width: 20px; height: 20px; margin-right: 5px;" />
                            }
                            Country:
                        </label>
                        <select class="form-select" id="countryDropdown" @onchange="OnCountryChanged" value="@selectedCountry">
                            <option value="">Select country...</option>
                            @foreach (var country in lunaCIPs!.Where(r => r.Region == selectedRegion).Select(r => r.Country).Distinct())
                            {
                                flagUrl = lunaCIPs.First(r => r.Country == country).FlagCode;

                                <option value="@country" class="custom-option" data-flag-url="@flagUrl">@country</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label class="form-label" for="cityDropdown">City:</label>
                        <select class="form-select" id="cityDropdown" @onchange="OnCityChanged" value="@selectedCity">
                            <option value="">Select country...</option>
                            @foreach (var country in lunaCIPs!.Where(r => r.Country == selectedCountry).Select(r => r.City).Distinct())
                            {
                                <option value="@country">@country</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
    }
    <stripe-buy-button buy-button-id="buy_btn_1OJHmLKcwfnufCukdPi6RXB0"
                       publishable-key="pk_test_51HiceVKcwfnufCukziNp1oruZ2nuPpARzfQlWISrKODNbE3ZcvfkVZFwO4DZWY4FwPwI5unnNBLvN0qOkpd89grY00gltyqH3r"
                       customer-email="@email">
    </stripe-buy-button>
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string email = string.Empty;
    private string usrId = string.Empty;

    private List<LunaCIP> lunaCIPs = new();
    private List<string> lunaCIPRegions = new();
    //private string selectedApp = string.Empty;
    //private string selectedProvider = string.Empty;
    private string selectedRegion = string.Empty;
    private string selectedCountry = string.Empty;
    private string selectedCity = string.Empty;
    private string flagUrl = string.Empty;

    private string selectedPayload = string.Empty;

    //private void OnAppChanged(ChangeEventArgs e)
    //{
    //    selectedApp = e?.Value?.ToString()!;
    //    InvokeAsync(StateHasChanged);
    //}

    private void OnRegionChanged(ChangeEventArgs e)
    {
        selectedRegion = e?.Value?.ToString()!;
        selectedCountry = string.Empty;
        selectedCity = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private void OnCountryChanged(ChangeEventArgs e)
    {
        selectedCountry = e?.Value?.ToString()!;
        selectedCity = string.Empty;
        InvokeAsync(StateHasChanged);
    }

    private void OnCityChanged(ChangeEventArgs e)
    {
        selectedCity = e?.Value?.ToString()!;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            email = state?.User?.Identity?.Name ?? "UNKNOWN USER";
            usrId = EncryptionHelper.GenerateToken(email);
            //await UsrService.CreateUserAccount(encryptedUserId: usrId);
        }

        await LunaApiService.GetRegions();
        lunaCIPs = LunaApiService.LunaCIPs;
        var uniqueRegions = lunaCIPs.Select(r => r.Region).Distinct().ToList();
        lunaCIPRegions.AddRange(uniqueRegions);
        StateHasChanged(); // Ensure UI updates after the data is loaded

        await base.OnInitializedAsync();
    }
}